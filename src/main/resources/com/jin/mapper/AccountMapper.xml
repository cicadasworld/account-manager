<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jin.mapper.AccountMapper">
    <!-- 映射配置文件增加cache节点配置 -->
    <cache/>
    <sql id="selectAll">
        select id, name, balance, status, create_date, update_date
        from jdbc_account
    </sql>

    <select id="selectById" parameterType="long" resultType="Account">
        <include refid="selectAll"/>
        where id = #{id}
    </select>

    <insert id="insert" parameterType="Account">
        <!-- selectKey用于获取插入数据的主键，只能用于MySql数据库 -->
        <selectKey resultType="long" order="AFTER" keyProperty="id" keyColumn="id">
            select last_insert_id()
        </selectKey>
        insert into jdbc_account values(null, #{name}, #{balance}, #{status}, now(), now())
    </insert>

    <update id="update" parameterType="Account">
        update jdbc_account
        set name        = #{name},
            balance     = #{balance},
            status      = #{status},
            update_date = now()
        where id = #{id}
    </update>

    <delete id="deleteById" parameterType="long">
        delete
        from jdbc_account
        where id = #{id}
    </delete>

    <!--  参数复杂的项目中不推荐使用map参数类型  -->
    <select id="selectByPage" parameterType="map" resultType="Account">
        <include refid="selectAll"/>
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
        </where>
        limit #{startIndex}, #{pageSize}
    </select>

    <select id="selectByQueryVO" parameterType="QueryVO" resultType="Account">
        <include refid="selectAll"/>
        where 1 = 1
        <if test="condition.status != null">
            and status = #{condition.status}
        </if>
        limit #{offset}, #{pageSize}
    </select>

    <select id="selectByStatus" parameterType="integer" resultType="Account">
        <include refid="selectAll"/>
        <if test="status != null">
            where status = #{status}
        </if>
    </select>

    <select id="selectByStatusAndName" parameterType="Account" resultType="Account">
        <include refid="selectAll"/>
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="name != null">
                and name = #{name}
            </if>
        </where>
    </select>

    <delete id="deleteByIds" parameterType="long">
        delete
        from jdbc_account
        where id in (
        <foreach collection="list" item="id" separator=",">
            #{id}
        </foreach>
        );
    </delete>

    <!--  设计数据库时应遵循表名以数据库名为前缀，如表名jdbc_role，列名以表名为前缀，如列名role_id  -->
    <!--  当对象的属性名和列名一致时，可以采用自动映射  -->
    <resultMap id="accountUserResultMap" type="Account" autoMapping="true">
        <!--        <id property="id" column="id"/>-->
        <result property="name" column="accountName"/>
        <!--        <result property="status" column="status"/>-->
        <!--        <result property="balance" column="balance"/>-->
        <result property="createDate" column="accountCreateDate"/>
        <result property="updateDate" column="accountUpdateDate"/>
        <association property="user" javaType="User" autoMapping="true">
            <!--            <id property="id" column="id"/>-->
            <!--            <result property="name" column="name"/>-->
            <!--            <result property="password" column="password"/>-->
            <!--            <result property="createDate" column="create_date"/>-->
            <!--            <result property="updateDate" column="update_date"/>-->
        </association>
    </resultMap>

    <select id="selectAccountUserByAccountId" parameterType="long" resultMap="accountUserResultMap">
        select account.id,
               account.name        as accountName,
               account.status,
               account.balance,
               account.create_date as accountCreateDate,
               account.update_date as accountUpdateDate,
               user.id,
               user.name,
               user.password,
               user.create_date,
               user.update_date
        from jdbc_account account,
             jdbc_user user
        where account.user_id = user.id and account.id = #{accountId};
    </select>

    <resultMap id="accountUserLazyLoadResultMap" type="Account" autoMapping="true">
        <!--  当在mybatis-config.xml中设置了全局的lazyLoadingEnabled为true，则不需要单独添加属性fetchType="lazy" -->
        <association property="user"
                     autoMapping="true"
                     select="com.jin.mapper.UserMapper.selectById"
                     column="user_id"/>
    </resultMap>

    <select id="selectAccountUserLazyLoadByAccountId" parameterType="long" resultMap="accountUserLazyLoadResultMap">
        select id, name, balance, status, create_date, update_date, user_id
        from jdbc_account
        where id = #{id}
    </select>

    <select id="selectByUserId" parameterType="long" resultType="Account">
        select id, name, balance, status, create_date, update_date, user_id
        from jdbc_account
        where user_id = #{userId}
    </select>
</mapper>